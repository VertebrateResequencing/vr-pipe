#!/usr/bin/env perl
use strict;
use warnings;

=head1 AUTHOR

Sendu Bala <sb10@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2012-2013 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use VRPipe::FrontEnd;
use Path::Class;
use File::Find;

my $frontend = VRPipe::FrontEnd->new(
    description => "Run chmod, chgrp and chown on all the files output by a VRPipe PipelineSetup.",
    opt_spec    => [
        ['setup=s',  'Pipeline setup (id or name) - REQUIRED', { persistent_object => 'PipelineSetup' }],
        ['steps=s@', q[A step name/number to choose which step outputs you want to change permissions on. If a step outputs more than one kind of file, you can limit to just one of the kinds by saying something like --steps "stepname|kindname". Can be repeated multiple times]],
        ['filter=s', q[Select files based on them having certain metadata. The string you must supply should be of the form "key1=value1,key2=value2". Values in that string are treated as regular expressions]],
        [],
        [q[To change the group on the files:]],
        ['chgrp=s', q[Supply the string you would give to the unix 'chgrp' command (excluding options and path)]],
        [],
        [q[To change the mode on the files:]],
        ['chmod=s', q[Supply the string you would give to the unix 'chmod' command (excluding options and path)]],
        [],
        [q[To change the owner of the files (you will need to have root permissions for this to work):]],
        ['chown=s', q[Supply the string you would give to the unix 'chown' command (excluding options and path)]]
    ]
);

my $setup = $frontend->get_pipelinesetups();
my @steps = $frontend->option_was_set('steps') ? @{ $frontend->opts('steps') } : ();
unless ($setup) {
    $frontend->die_with_error("--setup is required");
}
unless ($frontend->option_was_set('chgrp') || $frontend->option_was_set('chmod') || $frontend->option_was_set('chown')) {
    $frontend->die_with_error("At least one of --chgrp, --chmod or --chown is required");
}

my %filters;
my $filter = $frontend->opts('filter');
if ($filter) {
    foreach my $keyval (split(',', $filter)) {
        $keyval =~ s/^\s+//;
        $keyval =~ s/\s+$//;
        my ($key, $val) = $keyval =~ /^([^=]+)=(.+)/;
        $filters{$key} = $val;
    }
}

# handle --steps
my %desired_steps;
foreach my $step_name (@steps) {
    my ($name, $kind) = split('\|', $step_name);
    $kind ||= 'all';
    if ($name =~ /^\d+$/) {
        $desired_steps{numbers}->{$name}->{$kind} = 1;
    }
    else {
        $desired_steps{names}->{$name}->{$kind} = 1;
    }
}
my @step_members = $setup->pipeline->step_members;
my @allowed_step_members;
my %allowed_kinds;
if (@steps) {
    foreach my $stepm (@step_members) {
        my $smid      = $stepm->id;
        my $step_name = $stepm->step->name;
        if (exists $desired_steps{names}->{$step_name}) {
            foreach my $kind (keys %{ $desired_steps{names}->{$step_name} }) {
                $allowed_kinds{$smid}->{$kind} = 1;
            }
        }
        my $step_num = $stepm->step_number;
        if (exists $desired_steps{numbers}->{$step_num}) {
            foreach my $kind (keys %{ $desired_steps{numbers}->{$step_num} }) {
                $allowed_kinds{$smid}->{$kind} = 1;
            }
        }
        next unless keys %{ $allowed_kinds{$smid} };
        
        push(@allowed_step_members, $stepm);
    }
}
else {
    foreach my $stepm (@step_members) {
        $allowed_kinds{ $stepm->id }->{all} = 1;
        push(@allowed_step_members, $stepm);
    }
}

# loop through elements, getting the list of file paths to work with
my $estates_pager = $setup->dataelementstates_pager(include_withdrawn => 1);
my $num_elements = 0;
my %paths;
while (my $estates = $estates_pager->next) {
    foreach my $element_state (@$estates) {
        # collect outputs
        my $element = $element_state->dataelement;
        $num_elements++;
        foreach my $stepm (@allowed_step_members) {
            my ($step_state) = VRPipe::StepState->search({ stepmember => $stepm, dataelement => $element, pipelinesetup => $setup });
            $step_state || next;
            
            my $step_outs = $step_state->output_files;
            my $smid      = $stepm->id;
            my $force     = exists $allowed_kinds{$smid}->{all};
            
            while (my ($kind, $files) = each %$step_outs) {
                unless ($force) {
                    next unless exists $allowed_kinds{$smid}->{$kind};
                }
                
                FILE: foreach my $file (grep { $_->update_stats_from_disc; $_->e } map { $_->resolve } @$files) {
                    if ($filter) {
                        my $meta = $file->metadata;
                        foreach my $key (keys %filters) {
                            my $val = $meta->{$key} || next FILE;
                            my $regex = $filters{$key};
                            next FILE unless $val =~ /$regex/;
                        }
                    }
                    
                    $paths{ $file->path->stringify } = 1;
                }
            }
        }
    }
}

my @paths   = keys %paths;
my $changed = @paths;
$frontend->output("$changed files were selected for alteration for $num_elements elements...");

# actually change the permissions on the files
if (@paths) {
    foreach my $cmd ('chgrp', 'chmod', 'chown') {
        my $arg = $frontend->opts($cmd) || next;
        open(my $pipe, "| xargs $cmd $arg");
        foreach my $path (@paths) {
            print $pipe $path, "\n";
        }
        close($pipe);
    }
    
    # make sure that all the parent dirs of the files we just changed are world
    # readable and executable
    my %dirs;
    foreach my $path (@paths) {
        my $dir = file($path)->dir;
        $dirs{$dir} = 1;
        my $num_parents = $dir->dir_list;
        for (1 .. $num_parents) {
            $dir = $dir->parent;
            $dirs{$dir} = 1;
        }
    }
    open(my $pipe, "| xargs chmod o+rX");
    foreach my $dir (keys %dirs) {
        print $pipe $dir, "\n";
    }
    close($pipe);
}

$frontend->output("Permissions changed (where possible).");

exit;
