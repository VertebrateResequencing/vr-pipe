#!/usr/bin/env perl
use strict;
use warnings;

=head1 AUTHOR

Sendu Bala <sb10@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2011-2012 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use VRPipe::FrontEnd;
use Path::Class;
use Data::Dumper;

my $frontend = VRPipe::FrontEnd->new(
    description => "Symlink the output files of a pipeline into a more usable directory structure.",
    opt_spec    => [
        [],
        [q[Required:]],
        ['setup=s', 'Get the output of this pipeline setup (id or name)', { persistent_object => 'PipelineSetup' }],
        [],
        [q[Before trying to choose where your symlinks will go and what they'll be called, you may wish to just list the inputs from your datasource and the resulting output files with their metadata:]],
        ['list|l:i', q[List out the relationship between input and outputs, with an optional limit on the number of inputs to show (default all with no value supplied)]],
        [],
        [q[If not using --list, the remaining options come into play; at least one option from each grouping must be chosen.]],
        [],
        [q[Choose which output files you want symlinks for:]],
        ['step=s@',           q[A step name/number to choose which step outputs you're interested in. If a step outputs more than one kind of file, you can limit to just one of the kinds by saying something like --step "stepname:kindname". If --step isn't supplied at all, all output files of all steps will get a symlink. Can be repeated]],
        ['filter=s',          q[Select files based on them having certain metadata. The string you must supply should be of the form "key1=value1,key2=value2". Values in that string are treated as regular expressions]],
        ['include_withdrawn', q[Also make symlinks for files generated for withdrawn dataelements]],
        [],
        [q[Choose where the symlinks should go:]],
        ['output_dir=s',         'The output (root) directory for files'],
        ['output_by_metadata=s', q[Place symlinks in a sub directory of --output_dir, based on the metadata on the output file. The string you must supply should be of the form "key1/key2" which would place the symlink for an output file with metadata {key1 => 'foo', key2 => 'bar' } in output_dir/foo/bar/. If there are multiple output files per input, and only one of them has the chosen metadata, all the other output file symlinks are placed in the same directory as the one with the metadata. Non-word characters in metadata values are converted to underscores to generate the sub directory names]],
        ['path_regex=s@',        q[If using output_by_metadata, optionally supply a regex and replacement string to alter the output subdirectory, eg. --path_regex 'foo#bar' will turn the path output_dir/sub/foo/path into output_dir/sub/bar/path. Multiple replacement may be made by supplying the --path_regex option multiple times]],
        ['OR'],
        ['output_with_input', q[Symlinks for output files should be placed in the same directory their input files were in ]],
        [],
        [q[Choose what the symlink basename should be:]],
        ['basename_as_output', q[Basename is what the pipeline itself chose to call the output file]],
        ['OR'],
        ['basename_as_input=s', q[Basename is the same as that of the input file with its extension replaced with the supplied string plus the output extension]],
        ['OR'],
        ['basename_from_metadata=s', q[Basename is the based on the metadata associated with the output file. The string you must supply should be of the form "string.%key1%.%key2%.base"]],
        [q[The resulting basename of any of these options can then be optionally modified with:]],
        ['basename_regex=s@', q[Supply a regex and replacement string to alter the basename, eg. --basename_regex 'foo#bar' will turn basename thefoo.file into thebar.file. Multiple replacement may be made by supplying the --basename_regex option multiple times]],
        [],
        ['Other options:'],
        ['pretend',         q[Print the file source and destination paths to stdout of the symlinks that would be created, without actually creating them]],
        ['print',           q[Print symlinks to stdout. Good for creating a fofn of the output files]],
        ['md5',             q[Also print the md5 of the file to stdout if it has been recorded in the vrpipe database (--print is automatically turned on)]],
        ['force_overwrite', q[If a symlink already exists at a destination with the wrong source, replace it (this option still won't overwrite actual files)]]
    ]
);

my $pretend                = $frontend->opts('pretend');
my $print                  = $frontend->opts('print');
my $md5                    = $frontend->opts('md5');
my $list                   = $frontend->opts('list');
my $output_dir             = $frontend->opts('output_dir');
my $output_with_input      = $frontend->opts('output_with_input');
my $output_by_metadata     = $frontend->opts('output_by_metadata');
my @path_regex             = $frontend->option_was_set('path_regex') ? @{ $frontend->opts('path_regex') } : ();
my $basename_as_output     = $frontend->opts('basename_as_output');
my $basename_as_input      = $frontend->opts('basename_as_input');
my $basename_from_metadata = $frontend->opts('basename_from_metadata');
my @basename_regex         = $frontend->option_was_set('basename_regex') ? @{ $frontend->opts('basename_regex') } : ();
my $setup                  = $frontend->get_pipelinesetups();
my @steps                  = $frontend->option_was_set('step') ? @{ $frontend->opts('step') } : ();
my $include_withdrawn      = $frontend->opts('include_withdrawn');
my $force_overwrite        = $frontend->opts('force_overwrite');

my %filters;
my $filter = $frontend->opts('filter');
if ($filter) {
    foreach my $keyval (split(',', $filter)) {
        $keyval =~ s/^\s+//;
        $keyval =~ s/\s+$//;
        my ($key, $val) = $keyval =~ /^([^=]+)=(.+)/;
        $filters{$key} = $val;
    }
}

unless ($setup) {
    $frontend->die_with_error("--setup is required");
}
unless (defined $list) {
    if ($output_by_metadata && !$output_dir) {
        $frontend->die_with_error("--output_by_metadata needs --output_dir");
    }
    if ($output_dir && $output_with_input) {
        $frontend->die_with_error("--output_dir and --output_with_input are mutually exclusive");
    }
    unless ($output_dir || $output_with_input) {
        $frontend->die_with_error("one of --output_dir and --output_with_input are required");
    }
    
    if ($basename_as_output && $basename_as_input && $basename_from_metadata) {
        $frontend->die_with_error("--basename_as_output, --basename_as_input and --basename_from_metadata are mutually exclusive");
    }
    unless ($basename_as_output || $basename_as_input || $basename_from_metadata) {
        $frontend->die_with_error("one of --basename_as_output and --basename_as_input --basename_from_metadata are required");
    }
    
    if (@path_regex && !$output_by_metadata) {
        $frontend->die_with_error("--path_regex needs --output_by_metadata");
    }
}
if ($basename_from_metadata) {
    my @splits = $basename_from_metadata =~ m/%/g;
    unless (scalar @splits % 2 == 0) {
        $frontend->die_with_error("the --basename_from_metadata must include an even number of '%' surrounding metadata keys to be replaced by their values");
    }
}
my @search_and_replace;
if (@basename_regex) {
    foreach my $regex (@basename_regex) {
        my ($search, $replace) = split('#', $regex);
        unless ($search && $replace) {
            $frontend->die_with_error("the --basename_regex must include a '#' to separate search from replace");
        }
        push @search_and_replace, [$search, $replace];
    }
}
my @path_search_and_replace;
if (@path_regex) {
    foreach my $regex (@path_regex) {
        my ($search, $replace) = split('#', $regex);
        unless ($search && $replace) {
            $frontend->die_with_error("the --path_regex must include a '#' to separate search from replace");
        }
        push @path_search_and_replace, [$search, $replace];
    }
}
if ($md5 && !$print) {
    $print = 1;
}

# handle --step
my %desired_steps;
my $limit_steps = 0;
if (@steps) {
    $limit_steps = 1;
    foreach my $step_name (@steps) {
        my ($name, $kind) = split(/[\|:]/, $step_name);
        $kind ||= 'all';
        if ($name =~ /^\d+$/) {
            $desired_steps{numbers}->{$name}->{$kind} = 1;
        }
        else {
            $desired_steps{names}->{$name}->{$kind} = 1;
        }
    }
}
my @step_members = $setup->pipeline->step_members;
my @allowed_step_members;
my %allowed_kinds;
if ($limit_steps) {
    foreach my $stepm (@step_members) {
        my $smid      = $stepm->id;
        my $step_name = $stepm->step->name;
        if (exists $desired_steps{names}->{$step_name}) {
            foreach my $kind (keys %{ $desired_steps{names}->{$step_name} }) {
                $allowed_kinds{$smid}->{$kind} = 1;
            }
        }
        my $step_num = $stepm->step_number;
        if (exists $desired_steps{numbers}->{$step_num}) {
            foreach my $kind (keys %{ $desired_steps{numbers}->{$step_num} }) {
                $allowed_kinds{$smid}->{$kind} = 1;
            }
        }
        next unless keys %{ $allowed_kinds{$smid} };
        
        push(@allowed_step_members, $stepm);
    }
}
else {
    foreach my $stepm (@step_members) {
        my $smid = $stepm->id;
        $allowed_kinds{$smid}->{all} = 1;
    }
    @allowed_step_members = (@step_members);
}

# loop through elements
my $estates_pager = $setup->dataelementstates_pager(include_withdrawn => $include_withdrawn);
my $count = 0;
my %done_outputs;
while (my $estates = $estates_pager->next) {
    foreach my $element_state (@$estates) {
        my $element = $element_state->dataelement;
        my $eident  = "DataElement " . $element->id;
        
        my ($element_result, $input_parent_dir, $input_basename);
        if (defined $list || $output_with_input || $basename_as_input) {
            $element_result = $element->result;
            my @input_paths = $element->paths;
            if (@input_paths) {
                $input_parent_dir = common_parent_dir(\@input_paths);
                
                if ($basename_as_input) {
                    if (@input_paths == 1) {
                        $input_basename = file($input_paths[0])->basename;
                        $input_basename =~ s/\.[^\.]+$/.$basename_as_input/;
                    }
                    else {
                        $frontend->error("$eident doesn't have exactly one input path associated with it, so --basename_as_input won't work; skipping");
                        next;
                    }
                }
            }
        }
        
        # get output file details
        my %output_files;
        my @output_files;
        my $filtered_files = 0;
        my $total_files    = 0;
        foreach my $stepm (@allowed_step_members) {
            my ($stepstate) = VRPipe::StepState->search({ stepmember => $stepm, dataelement => $element, pipelinesetup => $setup, complete => 1 });
            $stepstate || next;
            
            my $step_outs = $stepstate->output_files;
            my $smid      = $stepm->id;
            my $force     = exists $allowed_kinds{$smid}->{all};
            my $step_name = $stepm->step->name;
            my $step_num  = $stepm->step_number;
            my $step_desc = "Step $step_num ($step_name)";
            while (my ($kind, $files) = each %$step_outs) {
                unless ($force) {
                    next unless exists $allowed_kinds{$smid}->{$kind};
                }
                my @files = $list ? (@$files) : (grep { $_->s || $_->resolve->s } @$files);
                next unless @files;
                
                my @file_data;
                FILE: foreach my $file (@files) {
                    my $meta = $file->metadata;
                    if ($filter) {
                        foreach my $key (keys %filters) {
                            my $val = $meta->{$key} || next FILE;
                            my $regex = $filters{$key};
                            next FILE unless $val =~ /$regex/;
                        }
                    }
                    
                    # for block_and_skip jobs, multiple estates can claim to
                    # have output the same output file, so we uniqify
                    next if exists $done_outputs{ $file->id };
                    $done_outputs{ $file->id } = 1;
                    
                    my %hash;
                    $hash{path} = $file->path->stringify;
                    $hash{metadata} = $meta if keys %$meta;
                    push(@file_data,    \%hash);
                    push(@output_files, $file);
                }
                $filtered_files += @files - @file_data;
                $total_files += @files;
                next unless @file_data;
                $output_files{$step_desc}->{$kind} = \@file_data;
            }
        }
        next if $filtered_files == $total_files;
        
        if (defined $list) {
            # print out useful info about the input
            $frontend->output("--- Data Element ", $element->id, " ---");
            if (defined $element_result->{paths}) {
                $element_result->{paths} = [$element->paths];
            }
            my $dump = Dumper($element_result);
            $dump =~ s/\$VAR1 = \{\s*?\n/Input:\n/;
            $dump =~ s/\n\s+\};\s+//;
            $frontend->output($dump);
            if ($input_parent_dir) {
                $frontend->output("--output_with_input symlinks would go in here: ", $input_parent_dir);
            }
            else {
                $frontend->output("--output_with_input can't be used, since there's no common parent directory for the input files");
            }
            
            # print out useful info about the output files
            $frontend->output("\n");
            $dump = Dumper(\%output_files);
            $dump =~ s/\$VAR1 = \{\s*?\n/Output:\n/;
            $dump =~ s/\n\s+\};\s+//;
            $frontend->output($dump);
            
            $frontend->output("------\n\n");
            if ($list) {
                last if ++$count >= $list;
            }
        }
        else {
            # work out the output dir
            my $this_output_dir;
            if ($output_with_input) {
                unless ($input_parent_dir) {
                    $frontend->error("$eident has no common parent directory for its input files, so --output_with_input doesn't work for it; skipping");
                    next;
                }
                $this_output_dir = dir($input_parent_dir);
            }
            else {
                if ($output_by_metadata) {
                    my @subdir_keys = split('\/', $output_by_metadata);
                    
                    # find the first output file metadata that has all these keys
                    my @subdirs;
                    foreach my $file (@output_files) {
                        my $metadata = $file->metadata;
                        my @these_dirs;
                        foreach my $key (@subdir_keys) {
                            if (defined $metadata->{$key}) {
                                my $sub_dir = $metadata->{$key};
                                $sub_dir =~ s/[^\w#-]/_/g;
                                push(@these_dirs, $sub_dir);
                            }
                        }
                        if (@these_dirs == @subdir_keys) {
                            @subdirs = @these_dirs;
                            last;
                        }
                    }
                    
                    unless (@subdirs) {
                        $frontend->error("$eident resulted in output files, none of which had metadata keys @subdir_keys; skipping");
                        next;
                    }
                    if (@path_regex) {
                        my @final_subdirs;
                        foreach my $subdir (@subdirs) {
                            foreach my $regex (@path_search_and_replace) {
                                my ($search, $replace) = @$regex;
                                $subdir =~ s/$search/$replace/;
                                my @captured = (undef, $1, $2, $3, $4, $5, $6, $7, $8, $9);
                                foreach my $i (1 .. 9) {
                                    my $capture = $captured[$i] || next;
                                    $subdir =~ s/\$$i/$capture/;
                                }
                            }
                            push @final_subdirs, split('\/', $subdir);
                        }
                        @subdirs = @final_subdirs;
                    }
                    $this_output_dir = dir($output_dir, @subdirs);
                }
                else {
                    $this_output_dir = dir($output_dir);
                }
                
                $this_output_dir->mkpath unless $pretend;
            }
            
            # figure out basename_from_metadata
            my $metadata_basename;
            if ($basename_from_metadata) {
                my @basename_keys = $basename_from_metadata =~ m/%([^%]+)%/g;
                
                # find the first output file metadata that has all these keys
                OFILE: foreach my $file (@output_files) {
                    my $metadata      = $file->metadata;
                    my $this_basename = $basename_from_metadata;
                    foreach my $key (@basename_keys) {
                        if (defined $metadata->{$key}) {
                            my $val = $metadata->{$key};
                            $val =~ s/[^\w#-]+/_/g;
                            $this_basename =~ s/%$key%/$val/;
                        }
                        else {
                            next OFILE;
                        }
                    }
                    $metadata_basename = $this_basename;
                }
                
                unless ($metadata_basename) {
                    $frontend->error("$eident resulted in output files, none of which had metadata keys @basename_keys; skipping");
                    next;
                }
            }
            
            # create a symlink for each output file.
            foreach my $output_file (@output_files) {
                # work out the basename
                my $this_basename;
                my $obase = $output_file->basename;
                if ($basename_as_output) {
                    $this_basename = $obase;
                }
                elsif ($basename_as_input) {
                    my $suffix = file_suffix($obase);
                    $this_basename = $input_basename . '.' . $suffix;
                }
                elsif ($basename_from_metadata) {
                    my $suffix = file_suffix($obase);
                    $this_basename = $metadata_basename . '.' . $suffix;
                }
                
                if (@basename_regex) {
                    foreach my $regex (@search_and_replace) {
                        my ($search, $replace) = @$regex;
                        $this_basename =~ s/$search/$replace/;
                        my @captured = (undef, $1, $2, $3, $4, $5, $6, $7, $8, $9);
                        foreach my $i (1 .. 9) {
                            my $capture = $captured[$i] || next;
                            $this_basename =~ s/\$$i/$capture/;
                        }
                    }
                }
                
                my $dest            = file($this_output_dir, $this_basename);
                my $dest_path       = $dest->stringify;
                my $resolved_output = $output_file->resolve;
                
                # make sure it doesn't already exist
                my $source     = $resolved_output->path;
                my $do_symlink = 1;
                if (-e $dest_path) {
                    if (-l $dest_path) {
                        my $dest_resolved_path = $dest->resolve->absolute->stringify; # Path::Class::File->resolve actually changes $dest
                        if ($dest_resolved_path eq $source || $dest_resolved_path eq $output_file->path) {
                            $do_symlink = 0;                                          # symlink is already there, and correct
                        }
                        elsif ($force_overwrite) {
                            VRPipe::File->create(path => $dest_path)->remove;         # remove symlink so new one can build
                        }
                        else {
                            $frontend->error("Can't create symlink $source => $dest_path since the destination already exists and isn't a symlink pointing to the source; skipping. Use --force_overwrite to overwrite this symlink.");
                            $do_symlink = 0;
                        }
                    }
                    else {
                        $frontend->error("Can't create symlink $source => $dest_path since the destination already exists and isn't a symlink; skipping");
                        $do_symlink = 0;
                    }
                }
                
                # create symlink
                if ($pretend) {
                    $frontend->output($resolved_output->path . ' => ' . $dest_path);
                }
                else {
                    $resolved_output->symlink(VRPipe::File->create(path => $dest_path)) if $do_symlink;
                }
                if ($print) {
                    if ($md5) {
                        $frontend->output($resolved_output->md5 || 'unknownmd5', "\t", $dest_path);
                    }
                    else {
                        $frontend->output($dest_path);
                    }
                }
            }
        }
    }
}

exit;

sub common_parent_dir {
    my $file_paths = shift;
    
    my @dir_lists;
    my $shallowest;
    foreach my $file_path (@$file_paths) {
        my $file = file($file_path);
        my $dir  = $file->dir;
        my @dirs = $dir->dir_list;
        if (!$shallowest || @dirs < $shallowest) {
            $shallowest = $#dirs;
        }
        push(@dir_lists, [@dirs]);
    }
    
    my $deepest_common = 0;
    foreach my $depth (0 .. $shallowest) {
        my %dir_names;
        foreach my $list (@dir_lists) {
            $dir_names{ $list->[$depth] }++;
        }
        
        if (keys %dir_names > 1) {
            last;
        }
        else {
            $deepest_common = $depth;
        }
    }
    
    return unless $deepest_common;
    return dir((@{ $dir_lists[0] })[0 .. $deepest_common]);
}

sub file_suffix {
    my $basename = shift;
    my $suffix;
    if ($basename =~ /\.gz(?:\.|$)/) {
        ($suffix) = $basename =~ /\.([^\.]+\.gz.*)$/;
    }
    elsif ($basename =~ /\.bam\.bai$/) {
        $suffix = 'bam.bai';
    }
    else {
        ($suffix) = $basename =~ /\.([^\.]+)$/;
    }
    return $suffix;
}
