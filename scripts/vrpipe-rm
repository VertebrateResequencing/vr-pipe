#!/usr/bin/env perl
use strict;
use warnings;

=head1 AUTHOR

Sendu Bala <sb10@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2012 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use VRPipe::FrontEnd;
use Path::Class;
use File::Find;

my $frontend = VRPipe::FrontEnd->new(
    description => "Delete files on disk, like unix 'rm', also updating the VRPipe database. Also let's you delete output files of a particular pipeline.",
    opt_spec    => [
        [],
        [q[To delete specified files, use standard unix 'rm' arguments.]],
        [],
        [q[To delete pipeline outputs, supply both:]],
        ['setup=s',  'Pipeline setup (id or name)', { persistent_object => 'PipelineSetup' }],
        ['steps=s@', q[A step name/number to choose which step outputs you want to delete. If a step outputs more than one kind of file, you can limit to just one of the kinds by saying something like --steps "stepname|kindname". Can be repeated multiple times]],
        [q[Optionally, further specify:]],
        ['search_by_metadata|m=s@', 'Only delete files with matching metadata. Use the form "key:value", where key or value can contain the % symbol to represent 0 or more of any character, eg. "sample:HG%"; "key" and ":value" by themselves can also be used. Can be repeated, in which case files must match all the criteria given'],
        [],
        [q[Currently supported unix 'rm' options:]],
        ['force|f',     q[Ignore nonexistent files, never prompt]],
        ['recursive|r', q[Remove directories and their contents recursively]],
        [],
        [q[Other options:]],
        ['pretend|p', q[Only print out what files would be deleted; don't actually delete anything]],
        ['verbose|v', q[Print out the files that are being deleted (automatically on if using --pretend)]]
    ]
);

my $pretend     = $frontend->opts('pretend');
my $verbose     = $frontend->opts('verbose');
my $force       = $frontend->opts('force');
my $recurse     = $frontend->opts('recursive');
my $setup       = $frontend->get_pipelinesetups();
my @steps       = $frontend->option_was_set('steps') ? @{ $frontend->opts('steps') } : ();
my @meta_search = $frontend->option_was_set('search_by_metadata') ? @{ $frontend->opts('search_by_metadata') } : ();
my @paths       = @ARGV;

if ($setup || @steps) {
    unless ($setup) {
        $frontend->die_with_error("--setup is required when using --steps");
    }
    unless (@steps) {
        $frontend->die_with_error("--steps is required when using --setup");
    }
}
elsif (@meta_search) {
    $frontend->die_with_error("--setup is required when using --search_by_metadata");
}
if ($pretend) {
    $verbose = 1;
}
if (!$setup && !@paths) {
    $frontend->die_with_error(qq[rm: missing operand\nTry `vrpipe-rm --help' for more information.]);
}

if ($setup) {
    # handle --search_by_metadata
    my $meta_match_needed = 0;
    my %meta_files;
    if (@meta_search) {
        $meta_match_needed = 1;
        
        my %kvls;
        foreach my $search (@meta_search) {
            my ($key, $val) = split(':', $search);
            
            my $criteria = {
                length($key) ? (keyval_key => $key =~ /%/ ? ({ like => $key }) : ($key)) : (),
                length($val) ? (val        => $val =~ /%/ ? ({ like => $val }) : ($val)) : (),
            };
            
            my %these_kvls;
            foreach my $kvl_id (VRPipe::KeyValListMember->get_column_values('keyvallist', $criteria)) {
                $these_kvls{$kvl_id} = 1;
            }
            
            foreach my $kvl_id (keys %these_kvls) {
                $kvls{$kvl_id}++;
            }
        }
        
        my $num_searches = @meta_search;
        KVL: while (my ($kvl_id, $count) = each %kvls) {
            next unless $count == $num_searches;
            
            foreach my $file (VRPipe::File->search({ keyvallist => $kvl_id })) {
                $file = $file->resolve(not_symlinks => 1);
                my $fid = $file->id;
                $meta_files{$fid} = 1;
            }
        }
    }
    
    # handle --steps
    my %desired_steps;
    foreach my $step_name (@steps) {
        my ($name, $kind) = split('\|', $step_name);
        $kind ||= 'all';
        if ($name =~ /^\d+$/) {
            $desired_steps{numbers}->{$name}->{$kind} = 1;
        }
        else {
            $desired_steps{names}->{$name}->{$kind} = 1;
        }
    }
    my @step_members = $setup->pipeline->step_members;
    my @allowed_step_members;
    my %allowed_kinds;
    foreach my $stepm (@step_members) {
        my $smid      = $stepm->id;
        my $step_name = $stepm->step->name;
        if (exists $desired_steps{names}->{$step_name}) {
            foreach my $kind (keys %{ $desired_steps{names}->{$step_name} }) {
                $allowed_kinds{$smid}->{$kind} = 1;
            }
        }
        my $step_num = $stepm->step_number;
        if (exists $desired_steps{numbers}->{$step_num}) {
            foreach my $kind (keys %{ $desired_steps{numbers}->{$step_num} }) {
                $allowed_kinds{$smid}->{$kind} = 1;
            }
        }
        next unless keys %{ $allowed_kinds{$smid} };
        
        push(@allowed_step_members, $stepm);
    }
    
    # loop through elements
    my $deleted          = 0;
    my $failed_to_delete = 0;
    my $skipped_deleting = 0;
    my $num_elements     = 0;
    my $estates_pager    = $setup->dataelementstates_pager(include_withdrawn => 1);
    my %done_files;
    my %delete_not_unique_to_us;
    
    while (my $estates = $estates_pager->next) {
        foreach my $element_state (@$estates) {
            # get output files
            my $element = $element_state->dataelement;
            $num_elements++;
            foreach my $stepm (@allowed_step_members) {
                my ($stepstate) = VRPipe::StepState->search({ stepmember => $stepm, dataelement => $element, pipelinesetup => $setup });
                $stepstate || next;
                my $step_outs = $stepstate->output_files(undef, only_unique_to_us => 0);
                my $smid      = $stepm->id;
                my $force     = exists $allowed_kinds{$smid}->{all};
                
                while (my ($kind, $files) = each %$step_outs) {
                    unless ($force) {
                        next unless exists $allowed_kinds{$smid}->{$kind};
                    }
                    
                    my $delete_not_unique_to_us = $delete_not_unique_to_us{$smid}->{$kind};
                    foreach my $file (@$files) {
                        $file = $file->resolve(not_symlinks => 1);
                        my $fid = $file->id;
                        
                        if ($meta_match_needed) {
                            next unless exists $meta_files{$fid};
                        }
                        
                        next if exists $done_files{$fid};
                        $done_files{$fid} = 1;
                        
                        unless ($file->e) {
                            $file->update_stats_from_disc;
                            unless ($file->e) {
                                next;
                            }
                        }
                        
                        unless ($delete_not_unique_to_us) {
                            my @other_setups = map { $_->stepstate->pipelinesetup->id } VRPipe::StepOutputFile->search({ file => $file->id, output_key => { '!=' => 'temp' }, stepstate => { '!=' => $stepstate->id }, 'stepstate.pipelinesetup' => { '!=' => $setup->id } }, { join => { stepstate => 'pipelinesetup' } });
                            if (@other_setups) {
                                unless (defined $delete_not_unique_to_us) {
                                    my $answer = $frontend->ask_question(question => "Other setups (" . join(', ', @other_setups) . ") also created " . $file->path . " (produced by setup " . $setup->id . " for step " . $stepm->step_number . ":$kind); are you sure you really want to delete this file and other files of this kind produced by this step?", possibles => [qw(y n)], required => 1);
                                    $delete_not_unique_to_us = $answer eq 'y' ? 1 : 0;
                                    $delete_not_unique_to_us{$smid}->{$kind} = $delete_not_unique_to_us;
                                }
                                
                                unless ($delete_not_unique_to_us) {
                                    $skipped_deleting++;
                                    next;
                                }
                            }
                        }
                        
                        if ($verbose) {
                            my $path = $file->path->stringify;
                            $frontend->output($path);
                        }
                        my $worked = $file->unlink unless $pretend;
                        if ($worked || $pretend) {
                            $deleted++;
                        }
                        else {
                            $failed_to_delete++;
                        }
                    }
                }
            }
        }
    }
    
    if ($failed_to_delete) {
        $frontend->output("$failed_to_delete files could not be deleted (most likely permission issues)");
    }
    if ($skipped_deleting) {
        $frontend->output("$skipped_deleting files were not deleted because other setups created them");
    }
    $frontend->output("$deleted files ", ($pretend ? "would have been" : "were"), " deleted for $num_elements elements") if $verbose;
}

my %protected_dirs;
my %dirs_with_files;
if (@paths) {
    if ($recurse && !$force) {
        # find all protected directories ahead of time, since they complicate
        # things
        foreach my $path (@paths) {
            next unless -e $path;
            next unless -d $path;
            find({ wanted => \&protected_dir, no_chdir => 1 }, $path);
        }
    }
    
    foreach my $path (@paths) {
        if (-e $path || -l $path) {
            if (-d $path) {
                if ($recurse) {
                    finddepth({ wanted => \&rm_path, preprocess => \&skip_protected_dirs, no_chdir => 1 }, $path);
                }
                else {
                    $frontend->error("rm: cannot remove `$path': Is a directory");
                }
            }
            else {
                rm_path($path);
            }
        }
        elsif (!$force) {
            $frontend->error("rm: cannot remove `$path': No such file or directory");
        }
    }
}

sub protected_dir {
    my $path = $_;
    return if exists $protected_dirs{$path};
    foreach my $protected (keys %protected_dirs) {
        return if dir($protected)->subsumes($path);
    }
    
    if (-d $path && !-w $path && !dir_is_empty($path)) {
        my $answer = $frontend->ask_question(question => "rm: descend into write-protected directory `$path'?", possibles => ['y', 'n'], default => 'n');
        unless ($answer eq 'y') {
            $protected_dirs{$path} = 1;
        }
    }
}

sub dir_is_empty {
    my $dir = shift;
    my $dfh;
    if (opendir($dfh, $dir)) {
        readdir $dfh;
        readdir $dfh;
        if (readdir $dfh) {
            return 0;
        }
        else {
            return 1;
        }
    }
    return 1;
}

sub skip_protected_dirs {
    my @basenames;
    foreach my $basename (@_) {
        push(@basenames, $basename) unless exists $protected_dirs{ dir($File::Find::dir, $basename) };
    }
    return @basenames;
}

sub rm_path {
    my $path = $_ || shift || $frontend->throw("rm_path got no path?!");
    if (-d $path) {
        return if exists $protected_dirs{$path};
        unless ($force) {
            return unless dir_is_empty($path);
        }
        unless (is_protected($path)) {
            if ($verbose) {
                $frontend->output($path);
            }
            rmdir($path) unless $pretend;
        }
    }
    else {
        unless (is_protected($path)) {
            my ($vrfile) = VRPipe::File->search({ path => file($path)->absolute });
            
            if ($pretend) {
                $frontend->output($path);
            }
            else {
                my $worked = 0;
                
                if ($vrfile) {
                    $worked = $vrfile->unlink;
                }
                else {
                    $worked = file($path)->remove;
                }
                
                unless ($worked) {
                    $frontend->error("rm: cannot remove `$path': Permission denied");
                }
                elsif ($verbose) {
                    $frontend->output($path);
                }
            }
        }
    }
}

sub is_protected {
    my $path = shift;
    return 0 if $force;
    return 0 if -w $path;
    return 0 if -l $path;
    
    my $answer;
    if (-d $path) {
        $answer = $frontend->ask_question(question => "rm: remove write-protected directory `$path'?", possibles => ['y', 'n'], default => 'n');
    }
    else {
        if (-s $path) {
            $answer = $frontend->ask_question(question => "rm: remove write-protected regular file `$path'?", possibles => ['y', 'n'], default => 'n');
        }
        else {
            $answer = $frontend->ask_question(question => "rm: remove write-protected regular empty file `$path'?", possibles => ['y', 'n'], default => 'n');
        }
    }
    if ($answer eq 'y') {
        return 0;
    }
    
    return 1;
}

exit;
