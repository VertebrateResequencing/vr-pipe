#!/usr/bin/env perl
use strict;
use warnings;

=head1 AUTHOR

Sendu Bala <sb10@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2012-2013 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use VRPipe::FrontEnd;
use Path::Class;
use File::Spec;
use File::Find;
use File::Copy;

my $frontend = VRPipe::FrontEnd->new(
    description => "Move files on disk, like unix 'mv', also updating the VRPipe database. Also let's you move output files of a particular pipeline setup to a new root directory. Note that a setup might create files outside of its output root, which will not get moved. For large-scale movements (eg. moving everything on one disc to another), use the --old_disc/--new_disc mode, which will also move datasource input files.",
    opt_spec    => [
        [],
        [q[To move specified files, use standard unix 'mv' arguments.]],
        [],
        [q[To move all the files output by a particular pipelinesetup supply both:]],
        ['setup=s',    'Pipeline setup (id or name)', { persistent_object => 'PipelineSetup' }],
        ['new_root=s', q[The new PipelineSetup output root]],
        [],
        [q[To move all the files output by and input to ALL pipelinesetups from one disc to another (non-VRPipe files are ignored):]],
        ['old_disc=s', 'The highest level root directory that might contain any VRPipe-created files'],
        ['new_disc=s', q[The corresponding directory on the new disc where files on the old_disc should be transposed to]],
        [],
        [q[Currently supported unix 'mv' options:]],
        ['none yet...'],
        [],
        [q[Other options:]],
        ['pretend|p', q[Only print out what files would be moved; don't actually move anything]],
        ['fast|f',    q[In --setup mode, don't confirm the existence of source files on disk, just trust VRPipe's knowledge; this may skip files that VRPipe thinks don't exist but actually do!]],
        ['verbose|v', q[Print out the files that are being moved (automatically on if using --pretend)]],
        ['check_md5s', q[Calculate the md5sum of each source file, copy it to the destination, check the md5 matches, then delete the source (this can be very slow, and does not apply when doing normal unix mv of files)], { default => 0 }]
    ]
);

my $pretend    = $frontend->opts('pretend');
my $verbose    = $frontend->opts('verbose');
my $setup      = $frontend->get_pipelinesetups();
my $new_root   = $frontend->opts('new_root');
my $old_disc   = $frontend->opts('old_disc');
my $new_disc   = $frontend->opts('new_disc');
my $check_md5s = $frontend->opts('check_md5s');
my $fast_mode  = $frontend->opts('fast');
my @paths      = @ARGV;

if ((defined $setup ? 1 : 0) + (defined $new_root ? 1 : 0) == 1) {
    $frontend->die_with_error(q[Both --setup and --new_root are required if either are used.]);
}
if ((defined $old_disc ? 1 : 0) + (defined $new_disc ? 1 : 0) == 1) {
    $frontend->die_with_error(q[Both --old_disc and --new_disc are required if either are used.]);
}
if ($old_disc && $setup) {
    $frontend->die_with_error(q[--setup and --old_disc don't make sense together.]);
}
if ($pretend) {
    $verbose = 1;
}
if (!$setup && !@paths && !$old_disc) {
    $frontend->die_with_error(qq[mv: missing file operand\nTry `vrpipe-rm --help' for more information.]);
}

if ($setup) {
    my @step_members = $setup->pipeline->step_members;
    my $old_root     = $setup->output_root;
    $setup->make_path(dir($new_root)->absolute);
    
    # we need to deactivate and destroy any current submissions before the move
    my $deactivated = 0;
    unless ($pretend) {
        if ($setup->active) {
            $frontend->output("Temporarily deactivating the setup prior to moving files.") if $verbose;
            $setup->active(0);
            $setup->update;
            $deactivated = 1;
        }
        
        my $pager = VRPipe::Submission->search_paged({ "_done" => 0, 'stepstate.pipelinesetup' => $setup->id }, { join => ['stepstate'], prefetch => 'job' });
        my $outstanding = $pager->total_entries;
        if ($outstanding) {
            my $answer = $frontend->ask_question(question => "The setup has $outstanding submissions outstanding which will need to be killed and fully reset before the move can proceed - are you sure you want to do this?", possibles => [qw(y n)], required => 1);
            if ($answer eq 'n') {
                $frontend->output("You didn't confirm, so exiting");
                if ($deactivated) {
                    $frontend->output("Reactivating the setup.") if $verbose;
                    $setup->active(1);
                    $setup->update;
                }
                exit;
            }
            else {
                my %sss;
                $frontend->output("Deleting submissions...") if $verbose;
                while (my $subs = $pager->next) {
                    foreach my $sub (@$subs) {
                        my $ss = $sub->stepstate;
                        $sss{ $ss->id } = $ss;
                    }
                }
                
                foreach my $ss (values %sss) {
                    $ss->pipelinesetup->log_event("Calling StepState->start_over because the user chose to kill off submissions before a vrpipe-mv could proceed", stepstate => $ss->id, dataelement => $ss->dataelement->id);
                    $ss->start_over;
                }
                $frontend->output("Outstanding submissions deleted.") if $verbose;
            }
        }
    }
    
    # loop through all elements
    my $moved         = 0;
    my $num_elements  = 0;
    my $estates_pager = $setup->dataelementstates_pager(include_withdrawn => 1);
    my %done_states;
    my %done_files;
    my $errors = 0;
    while (my $estates = $estates_pager->next) {
        foreach my $element_state (@$estates) {
            # move outputs
            my $element = $element_state->dataelement;
            $num_elements++;
            foreach my $stepm (@step_members) {
                print STDERR '. ' if $verbose;
                
                my ($step_state) = VRPipe::StepState->search({ stepmember => $stepm, dataelement => $element, pipelinesetup => $setup });
                $step_state || next;
                next if exists $done_states{ $step_state->id };
                my $same = $step_state->same_submissions_as;
                next if ($same && (exists $done_states{ $same->id }));
                
                # we'll only move files within the output_root, so we don't care
                # about uniqueness: it is harmless to move a file, but
                # potentially problematic if we don't and the user expected it
                # was moved
                my $step_outs = $step_state->output_files(undef, only_unique_to_us => 0);
                my $smid = $stepm->id;
                
                while (my ($kind, $files) = each %$step_outs) {
                    my @files = grep { $_->update_stats_from_disc unless $fast_mode; $_->e } map { $_->resolve(not_symlinks => 1) } @$files;
                    next unless @files;
                    
                    foreach my $file (@files) {
                        next if exists $done_files{ $file->id };
                        $done_files{ $file->id } = 1;
                        
                        my $source = $file->path;
                        if ($source =~ /^$new_root/) {
                            $frontend->error("Source file [$source] already looks like its within the new output_root [$new_root]; skipping it!");
                            next;
                        }
                        unless ($source =~ /^$old_root/) {
                            $frontend->error("Source file [$source] doesn't look like its within the current output_root [$old_root]; skipping it!");
                            next;
                        }
                        my $rel_path = File::Spec->abs2rel($source, $old_root);
                        my $dest = File::Spec->rel2abs($rel_path, $new_root);
                        next if $dest eq $source;
                        
                        if ($verbose) {
                            $frontend->output("$source => $dest");
                        }
                        
                        unless ($pretend) {
                            my $dest_dir = file($dest)->dir;
                            unless (-d $dest_dir) {
                                $file->make_path($dest_dir);
                            }
                            
                            eval { $file->move(VRPipe::File->create(path => $dest), check_md5s => $check_md5s); };
                            if ($@) {
                                $frontend->error("Failed to move $source => $dest, skipping:\n$@");
                                $errors++;
                                next;
                            }
                        }
                        $moved++;
                    }
                }
                
                $done_states{ $step_state->id } = 1;
                $done_states{ $same->id } = 1 if $same;
            }
        }
    }
    
    unless ($pretend) {
        unless ($errors) {
            $setup->output_root($new_root);
            $setup->update;
            $frontend->output("Output root of the setup has been updated.") if $verbose;
        }
        else {
            $frontend->error("$errors files could not be moved; the output root of the setup has NOT been altered.");
        }
        
        if ($deactivated) {
            $frontend->output("Reactivating the setup.") if $verbose;
            $setup->active(1);
            $setup->update;
        }
    }
    
    $frontend->output("$moved files ", ($pretend ? "would have been" : "were"), " moved for $num_elements elements") if $verbose;
}
elsif ($old_disc) {
    my $moved = 0;
    
    finddepth({ wanted => \&mv_vrpipe_outputs, no_chdir => 1 }, $old_disc);
    
    sub mv_vrpipe_outputs {
        my $path = $_;
        return if -d $path;
        
        my ($file) = VRPipe::File->search({ path => $path });
        $file || return;
        my $an_output_file = $file->output_by;
        unless ($an_output_file) {
            my $an_input_file = $file->input_to;
            return unless $an_input_file;
        }
        $file->update_stats_from_disc;
        
        mv_file($file);
    }
    
    sub mv_file {
        my $file   = shift;
        my $source = $file->path;
        return unless -e $source;
        my $rel_path = File::Spec->abs2rel($source, $old_disc);
        my $dest = File::Spec->rel2abs($rel_path, $new_disc);
        return if $dest eq $source;
        
        if ($verbose) {
            $frontend->output("$source => $dest");
        }
        
        unless ($pretend) {
            my $dest_dir = file($dest)->dir;
            unless (-d $dest_dir) {
                $file->make_path($dest_dir);
            }
            $file->move(VRPipe::File->create(path => $dest), check_md5s => $check_md5s);
        }
        $moved++;
    }
    
    # manually move any datasource source files that are on old_disc; we have
    # to go through everything to catch source files that have been moved to
    # $old_disc
    foreach my $ds (VRPipe::DataSource->search({})) {
        my $instance = $ds->_source_instance;
        next unless $instance->can('source_file');
        my $sf;
        eval { $sf = $instance->source_file; };
        next if $@; # skip broken datasources
        my $sp = $sf->path;
        if ($sp =~ /^$old_disc/) {
            mv_file($sf);
        }
    }
    
    $frontend->output("$moved files ", ($pretend ? "would have been" : "were"), " moved") if $verbose;
}

my %protected_dirs;
my %dirs_with_files;
if (@paths) {
    my $dest = pop(@paths);
    chomp($dest);
    if (@paths == 1 && !-d $dest) {
        my $dest_dir = file($dest)->dir;
        unless (-d $dest_dir) {
            $frontend->die_with_error("mv: cannot move `$paths[0]' to `$dest': No such file or directory");
        }
    }
    elsif (@paths > 1 && !-d $dest) {
        $frontend->die_with_error("mv: target `$dest' is not a directory");
    }
    
    foreach my $path (@paths) {
        if (-e $path || -l $path) {
            if (-d $path) {
                $frontend->error("moving directories is not yet implemented, skipping `$path'");
                #finddepth({ wanted => \&mv_path, no_chdir => 1 }, $path, $dest);
            }
            else {
                mv_path($path, $dest);
            }
        }
        else {
            $frontend->error("mv: cannot stat `$path': No such file or directory");
        }
    }
}

sub mv_path {
    my ($path, $dest) = @_;
    
    my ($vrfile) = VRPipe::File->search({ path => file($path)->absolute });
    if ($pretend) {
        $frontend->output("$path => $dest");
    }
    else {
        my $worked = 0;
        
        if ($vrfile) {
            my $vrdest;
            if (-d $dest) {
                $vrdest = VRPipe::File->create(path => file($dest, $vrfile->basename));
            }
            else {
                $vrdest = VRPipe::File->create(path => file($dest));
            }
            $worked = $vrfile->move($vrdest);
        }
        else {
            $worked = File::Copy::move($path, $dest);
        }
        
        unless ($worked) {
            $frontend->error("mv: cannot move `$path' to `$dest'");
        }
        elsif ($verbose) {
            $frontend->output("$path => $dest");
        }
    }
}

exit;
