#!/usr/bin/env perl
use strict;
use warnings;

=head1 AUTHOR

Sendu Bala <sb10@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2011-2013 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use VRPipe::FrontEnd;
use Path::Class;

my $frontend = VRPipe::FrontEnd->new(
    description => "See details related to incomplete element states.",
    opt_spec    => [
        ['element=i',         'Show details for this single dataelement only (requires --setup as well)',                                      { persistent_object => 'DataElement' }],
        ['setup=s@',          'Only show details for the given PipelineSetup (by id or name); you can repeat this option',                     { persistent_object => 'PipelineSetup' }],
        ['elementstate=i',    'Show details for this single dataelementstate only',                                                            { persistent_object => 'DataElementState' }],
        ['failed|f',          q[Only show elements that have have stalled in a pipeline due to repeated failures that couldn't be overcome automatically]],
        ['retries|r=i',       q[When using --failed, this is the number of retries are needed before something is considered to have stalled], { default           => 3 }],
        ['exclude_withdrawn', q[Normally all element states are considered; this option will exclude those for withdrawn elements],            { default           => 0 }],
        ['all|a',             q[Normally only details of incomplete elements are given; this shows even ones that are done (may be very slow)]],
        [],
        [q[Choose what information to display (by default outputs information on the step currently being worked on and submission breakdown):]],
        ['output_root', 'Show the path of the hashed output directory associated with this element'],
        ['input_paths', 'Show the input paths (if any) for this element'],
        [],
        [q[After the above options have been used to filter the list of all elements, and their details have been printed to screen, the following options will let you take action on those elements (after a confirmation prompt):]],
        ['start_from_scratch', q[For each pipeline you will be asked for a list of steps, and these will be fully reset so it is as if those steps had never been run for all the element states that went through that pipeline]],
        ['withdraw',           q[Manually withdraw the selected element states. Be aware that if the datasource for the pipelinesetup is updated, these element states will be un-withdrawn]],
        ['no_report',          q[Don't print out full details of each element, just start_from_scratch as fast as possible]],
        ['force_with_all', q[Force --start_from_scratch to work with --all], { hidden => 1 }]
    ]
);

my $desired_ele        = $frontend->option_was_set('element') || $frontend->option_was_set('elementstate');
my $failed             = $frontend->opts('failed');
my $retries            = $frontend->opts('retries');
my $exclude_withdrawn  = $frontend->opts('exclude_withdrawn');
my $all                = $frontend->opts('all');
my $output_root        = $frontend->opts('output_root');
my $input_paths        = $frontend->opts('input_paths');
my $start_from_scratch = $frontend->opts('start_from_scratch');
my $withdraw           = $frontend->opts('withdraw');
my $no_report          = $frontend->opts('no_report');
my $force_with_all     = $frontend->opts('force_with_all');

my $extra_info = $output_root || $input_paths;

if ($all && $failed) {
    $frontend->error("--all and --failed don't make sense togother; ignoring --all");
    undef $all;
}

if ($all && !$force_with_all && $start_from_scratch) {
    $frontend->die_with_error("Sorry, --all combined with --start_from_scratch seems like a really bad idea. Use --force_with_all if you're really really sure");
}

my @setups = $frontend->get_pipelinesetups($desired_ele ? (allow_no_setups => 1) : ());
my (@element_states, @datasources);
if ($start_from_scratch) {
    $SIG{'INT'} = sub {
        foreach my $ds (@datasources) {
            $ds->unlock;
        }
        exit 0;
    };
}
if ($desired_ele) {
    my $e = $frontend->opts('element');
    if ($e && @setups != 1) {
        $frontend->die_with_error("When using --element, exactly one --setup must be supplied");
    }
    my $es = $frontend->opts('elementstate');
    if ($e && $es) {
        $frontend->die_with_error("You cannot specify both --element and --elementstate");
    }
    if ($e) {
        ($es) = VRPipe::DataElementState->search({ pipelinesetup => $setups[0]->id, dataelement => $e->id });
        unless ($es) {
            $frontend->die_with_error("The --setup you specified does not have the --dataelement you specified");
        }
    }
    
    @element_states = ($es);
    if ($start_from_scratch) {
        my $ds = $es->pipelinesetup->datasource;
        $frontend->output("Will wait until the datasource for setup ", $es->pipelinesetup->id, " is not being updated or triggered...");
        $ds->block_until_locked;
        push(@datasources, $ds);
    }
}
else {
    foreach my $setup (@setups) {
        if ($start_from_scratch) {
            my $ds = $setup->datasource;
            $frontend->output("Will wait until the datasource for setup ", $setup->id, " is not being updated or triggered...");
            $ds->block_until_locked;
            push(@datasources, $ds);
        }
        
        if ($all) {
            push(@element_states, $setup->dataelementstates(include_withdrawn => !$exclude_withdrawn));
        }
        else {
            my $estates_pager = $setup->datasource->incomplete_element_states($setup, include_withdrawn => !$exclude_withdrawn, prepare => 0);
            my @estates;
            while (my $estates = $estates_pager->next) {
                push(@estates, @$estates);
            }
            
            if ($failed) {
                my $pipeline = $setup->pipeline;
                foreach my $estate (@estates) {
                    my @sms = VRPipe::StepMember->search({ step_number => ($estate->completed_steps + 1), pipeline => $pipeline->id });
                    
                    my $step_member;
                    if (@sms == 1) {
                        $step_member = $sms[0];
                    }
                    else {
                        $frontend->error("element state ", $estate->id, " didn't have exactly 1 corresponding step member; skipping");
                        next;
                    }
                    
                    my ($sstate) = VRPipe::StepState->search({ stepmember => $step_member, dataelement => $estate->dataelement, pipelinesetup => $setup });
                    $sstate || next;
                    if ($sstate->complete) {
                        $estate->completed_steps($estate->completed_steps + 1);
                        $estate->update;
                        redo;
                    }
                    
                    my $found = VRPipe::Submission->search({ retries => $retries, '_failed' => 1, stepstate => $sstate->submission_search_id });
                    if ($found) {
                        #*** can we combine all the above into one big search search query with multiple joins?...
                        push(@element_states, $estate);
                    }
                }
            }
            else {
                push(@element_states, @estates);
            }
        }
    }
}

my $count = 0;
my %summary;
my %sub_summary;
my %for_scratching;
foreach my $estate (@element_states) {
    my $setup           = $estate->pipelinesetup;
    my $pipeline        = $setup->pipeline;
    my @stepms          = $pipeline->step_members;
    my $num_steps       = @stepms;
    my $pipe_name       = $pipeline->name . " ($num_steps steps)";
    my $withdrawn       = $estate->dataelement->withdrawn;
    my $completed_steps = $estate->completed_steps;
    my $last_step_name  = 'no_steps_complete';
    foreach my $stepm (@stepms) {
        next unless $stepm->step_number == $completed_steps;
        my $step = $stepm->step;
        $last_step_name = $stepm->step->name . " (step $completed_steps)";
    }
    
    $count++;
    $summary{$pipe_name}->{$last_step_name}++;
    push(@{ $for_scratching{ $pipeline->id } }, $estate);
    
    next if $no_report;
    
    my $step_desc;
    if ($completed_steps == $num_steps) {
        $step_desc = ': complete!';
    }
    else {
        my $current_step_num = $completed_steps + 1;
        my ($step_member) = grep { $_->step_number == $current_step_num } @stepms;
        my ($sstate) = VRPipe::StepState->search({ stepmember => $step_member, dataelement => $estate->dataelement, pipelinesetup => $setup });
        if ($sstate) {
            my @subs = VRPipe::Submission->search({ stepstate => $sstate->submission_search_id }, { prefetch => 'job' });
            my ($num_failed, $num_perm_failed, $num_done, $num_scheduled, $num_running) = (0, 0, 0, 0, 0);
            foreach my $sub (@subs) {
                if ($sub->failed) {
                    if ($sub->retries >= $retries) {
                        $num_perm_failed++;
                    }
                    else {
                        $num_failed++;
                    }
                }
                elsif ($sub->done) {
                    $num_done++;
                }
                else {
                    if ($sub->job->is_alive) {
                        $num_running++;
                    }
                    else {
                        $num_scheduled++;
                    }
                }
            }
            
            my $current_step_name = $step_member->step->name;
            my $status = $num_perm_failed ? 'STALLED' : 'working';
            my @subs_desc;
            if ($num_perm_failed) {
                push(@subs_desc, "$num_perm_failed PERMANENTLY failed");
                $sub_summary{$current_step_name}->{permanent_fail} += $num_perm_failed;
            }
            if ($num_failed) {
                push(@subs_desc, "$num_failed temporarily failed");
                $sub_summary{$current_step_name}->{temporary_fail} += $num_failed;
            }
            if ($num_done) {
                push(@subs_desc, "$num_done finished ok");
                $sub_summary{$current_step_name}->{complete} += $num_done;
            }
            if ($num_running) {
                push(@subs_desc, "$num_running currently running");
                $sub_summary{$current_step_name}->{running} += $num_running;
            }
            if ($num_scheduled) {
                push(@subs_desc, "$num_scheduled scheduled to run");
                $sub_summary{$current_step_name}->{scheduled} += $num_scheduled;
            }
            my $subs_desc;
            if (@subs_desc) {
                $subs_desc = '(submission breakdown = ' . join(', ', @subs_desc) . ')';
            }
            else {
                $subs_desc = '(no submissons created for step state ' . $sstate->id . ' yet)';
            }
            
            $step_desc = ": currently $status on $current_step_name $subs_desc";
        }
        else {
            $step_desc = ': has no stepstate associated with it!';
        }
    }
    
    $frontend->output("DataElement ", $estate->dataelement->id, " (DataElementState ", $estate->id, ") for pipeline $pipe_name in setup ", $setup->id, " completed step $last_step_name$step_desc", $withdrawn ? ', element is withdrawn' : '');
    if ($extra_info) {
        $frontend->output("Output root: ", output_root($estate)) if $output_root;
        $frontend->output("Input paths: ", join(",", $estate->dataelement->paths)) if $input_paths;
        $frontend->output("---\n");
    }
}

unless ($desired_ele) {
    unless ($count == 0 || $no_report) {
        $frontend->output("\n");
    }
    $frontend->output("$count element states passed your filter");
    if ($count) {
        $frontend->output("Here's the break-down by the name of the step the element last completed successfully:");
        while (my ($pipe_name, $step_details) = each %summary) {
            $frontend->display_hash("\t$pipe_name", $step_details);
        }
        unless ($no_report) {
            $frontend->output("\n");
            $frontend->output("Here's the break-down state of current submissions associated with these elements:");
            while (my ($step_name, $sub_details) = each %sub_summary) {
                $frontend->display_hash("\t$step_name", $sub_details);
            }
        }
    }
}

if ($count > 0 && $start_from_scratch) {
    while (my ($pipeline_id, $estates) = each %for_scratching) {
        my $count    = @$estates;
        my $pipeline = VRPipe::Pipeline->get(id => $pipeline_id);
        my $answer   = $frontend->ask_question(question => "Are you sure you want to start $count data element states over from scratch for steps (that you'll choose next) in pipeline?", possibles => [qw(y n)], default => 'n');
        if ($answer eq 'y') {
            # give the user a step list to choose from, and provide them a
            # reasonable default
            $frontend->output("Provide a space-separated list of step numbers you'd like to start over from scratch (you should avoid steps that produce output shared by multiple elements/pipelines):");
            foreach my $stepm ($pipeline->step_members) {
                $frontend->output('  ', $stepm->step_number, ': ', $stepm->step->name);
            }
            my $furthest_estate;
            my $furthest = 0;
            foreach my $estate (@$estates) {
                my $completed = $estate->completed_steps;
                if ($completed >= $furthest) {
                    $furthest        = $completed;
                    $furthest_estate = $estate;
                }
            }
            my @default_steps = $furthest_estate->our_step_numbers;
            
            my $max = $pipeline->num_steps;
            $answer = $frontend->ask_question(question => "Step numbers", default => join(' ', @default_steps), required => 1, possibles => [1 .. $max], allow_multiple => ' ');
            my @desired_steps = sort { $a <=> $b } grep { $_ =~ /^\d+$/ && $_ >= 1 && $_ <= $max } split(/\s+/, $answer);
            $frontend->output("Will redo steps ", join(', ', @desired_steps));
            
            foreach my $estate (@$estates) {
                $estate->pipelinesetup->log_event("vrpipe-elements --start_from_scratch will call DataElementState->start_from_scratch", dataelement => $estate->dataelement->id);
                $estate->start_from_scratch(step_numbers => \@desired_steps);
            }
            $frontend->output("Done");
        }
        else {
            $frontend->output("You said no, so skipping");
        }
    }
}

if ($count > 0 && $withdraw) {
    while (my ($pipeline_id, $estates) = each %for_scratching) {
        my $count    = @$estates;
        my $pipeline = VRPipe::Pipeline->get(id => $pipeline_id);
        my $answer   = $frontend->ask_question(question => "$count elements will be withdrawn for setup $pipeline_id. Be aware that if the datasource for this setup is updated, these elements will be un-withdrawn. If possible, it is recommended that you withdrawn these elements in your datasource instead. Are you sure you want to withdraw $count data elements?", possibles => [qw(y n)], default => 'n');
        if ($answer eq 'y') {
            foreach my $estate (@$estates) {
                next if $estate->dataelement->withdrawn;
                $estate->pipelinesetup->log_event("vrpipe-elements --withdraw will call DataElementState->withdraw", dataelement => $estate->dataelement->id);
                $estate->withdraw;
            }
            $frontend->output("Done");
        }
        else {
            $frontend->output("You said no, so skipping");
        }
    }
}

foreach my $ds (@datasources) {
    $ds->unlock;
}

exit;

sub output_root {
    my ($estate)       = @_;
    my $des_id         = $estate->id;
    my $de_id          = $estate->dataelement->id;
    my $pipeline_root  = $estate->pipelinesetup->output_root;
    my $hashing_string = 'VRPipe::DataElementState::' . $des_id;
    my @subdirs        = $estate->hashed_dirs($hashing_string);
    
    return file($pipeline_root, @subdirs, $de_id);
}
