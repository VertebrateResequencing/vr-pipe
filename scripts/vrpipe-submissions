#!/usr/bin/env perl
use strict;
use warnings;

=head1 AUTHOR

Sendu Bala <sb10@sanger.ac.uk>.

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2011-2012 Genome Research Limited.

This file is part of VRPipe.

VRPipe is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=cut

use VRPipe::FrontEnd;

my $frontend = VRPipe::FrontEnd->new(
    description => "See details related to incomplete submissions.",
    opt_spec    => [
        ['submission=i', 'Show details for this single submission only',                                                                                                             { persistent_object => 'Submission' }],
        ['setup=s',      'Only show details for submissions belonging to the given PipelineSetup (by id or name)',                                                                   { persistent_object => 'PipelineSetup' }],
        ['step=s',       'Only show details for submissions created for the step with this name or number'],
        ['failed|f',     q[Only show submissions that have stalled due to repeated failures that couldn't be overcome automatically]],
        ['retries|r=i',  q[When using --failed, before something is considered to have stalled it must have been retried this number or more times (0 means any number of retries)], { default           => 3 }],
        ['done',         q[Only show submissions that have succeeded],                                                                                                               { default           => 0 }],
        ['all|a',        q[Normally only details of incomplete submissions are given; this shows everything (may be very slow)]],
        ['limit|l=i',    q[Only show this number of submissions]],
        [],
        [q[After the above options have been used to filter the list of all submissions, and their details have been printed to screen, the following options will let you take action on those submissions (after a confirmation prompt):]],
        ['start_over',    q[Start the submissions over again, resetting their associated jobs and setting the number of retries back to 0, but keeping the current memory and time requirements. NB: the exact same cmd lines will be retried, since the jobs are not out-right deleted. Use this when you just want VRPipe to try a few more times automatically, further increasing memory/time requirements if VRPipe knew the previous failures were due to running out of memory or time. Implies --no_report]],
        ['full_reset',    q[All submissions associated with the step and data element of the submissions that you chose will be deleted outright along with their jobs and all output files; memory and time requirements will also be reset to their defaults/manually set values. VRPipe will then recreate new submissions and jobs for those steps and data elements. This is what you'd need to use if you changed options for a step that would result in new cmd lines, or if you manually set a new memory/time requirement. Implies --no_report]],
        ['partial_reset', q[Like full_reset, except that successful submissions are left alone. Implies --failed --retries 0 --no_report]],
        ['no_report',     q[Don't print out full details of each submission, just start_over or full_reset them as fast as possible]],
        ['force_with_all', q[Force --start_over or --full_reset to work with --all], { hidden => 1 }]
    ]
);

my $desired_sub    = $frontend->option_was_set('submission');
my $retries        = $frontend->opts('retries');
my $setup          = $frontend->get_pipelinesetups();
my $desired_step   = $frontend->opts('step');
my $failed         = $frontend->opts('failed');
my $all            = $frontend->opts('all');
my $done           = $frontend->opts('done');
my $limit          = $frontend->opts('limit');
my $start_over     = $frontend->opts('start_over');
my $full_reset     = $frontend->opts('full_reset');
my $partial_reset  = $frontend->opts('partial_reset');
my $no_report      = $frontend->opts('no_report');
my $force_with_all = $frontend->opts('force_with_all');

if ($desired_sub && ($setup || $desired_step)) {
    $frontend->error("--submission is mutually exclusive of --setup and --step; they will be ignored");
    undef $setup;
    undef $desired_step;
}
if ($all && ($failed || $done)) {
    $frontend->error("--all and --failed/done don't make sense together; ignoring --all");
    undef $all;
}
if ($start_over && ($full_reset || $partial_reset)) {
    $frontend->error("--start_over and --full/partial_reset don't make sense together; ignoring --full/partial_reset");
    undef $full_reset;
    undef $partial_reset;
}
if ($full_reset && $partial_reset) {
    $frontend->error("--partial_reset and --full_reset don't make sense together; ignoring --partial_reset");
    undef $partial_reset;
}
if ($partial_reset) {
    $failed  = 1;
    $done    = 0;
    $all     = 0;
    $retries = 0;
}
if ($start_over || $full_reset || $partial_reset) {
    $no_report = 1;
}
if ($all && !$force_with_all && ($start_over || $full_reset || $partial_reset)) {
    $frontend->die_with_error("Sorry, --all combined with --start_over or --full/partial_reset seems like a really bad idea. Use --force_with_all if you're really really sure");
}

my @subs;
if ($desired_sub) {
    @subs = ($frontend->opts('submission'));
}
else {
    @subs = VRPipe::Submission->search({
            $all ? () : ("_done" => $done), $failed ? ("_failed" => 1, $retries ? (retries => { '>=' => $retries }) : ()) : (),
            $setup ? ('stepstate.pipelinesetup' => $setup->id) : (),
            $desired_step ? ($desired_step =~ /^\d+$/ ? ('stepmember.step_number' => $desired_step) : ('step.name' => $desired_step)) : ()
        },
        {
            order_by => { -asc => 'me.id' },
            $setup ? (join => ['stepstate', $desired_step ? ({ stepstate => { stepmember => 'step' } }) : ()]) : (),
            $limit ? (rows => $limit) : (),
            prefetch => [qw(stepstate job requirements scheduler)]
        }
    );
}

my $count = 0;
my %summary;
my @final_subs;
foreach my $sub (@subs) {
    my $state     = $sub->stepstate;
    my $setup     = $state->pipelinesetup->name;
    my $stepm     = $state->stepmember;
    my $step_name = $stepm->step->name;
    
    $count++;
    push(@final_subs, $sub);
    $summary{$step_name}++;
    
    next if $no_report;
    
    my $step_num  = $stepm->step_number;
    my $job       = $sub->job;
    my $req       = $sub->requirements;
    my $de        = $state->dataelement->id;
    my $scheduler = $sub->scheduler->type;
    
    my $sub_state = $sub->done ? 'done' : ($sub->failed ? 'failed' : 'scheduled');
    $frontend->output("---\nSubmission ", $sub->id, " for job ", $job->id, " for dataelement $de in step $step_num (\"$step_name\") of pipelinesetup \"$setup\" is $sub_state, having been retried ", $sub->retries, " times");
    my $job_state = $job->end_time           ? 'finished'                                     : ($job->start_time ? 'running' : 'pending');
    my $job_host  = $job->host               ? ', on host ' . $job->host                      : '';
    my $job_extra = $job_state eq 'finished' ? ', having exited with code ' . $job->exit_code : '';
    $frontend->output("The job is $job_state$job_host$job_extra; its command line is:\n", $job->cmd);
    $frontend->output("The working directory for the job is ",                            $job->dir);
    $frontend->output("We reserved ",                                                     $req->memory, "MB memory and ", ($req->time / (60 * 60)), "hrs of time");
    
    if ($sub_state ne 'scheduled' || $sub->retries > 0) {
        if ($job->end_time) {
            my $mem            = $job->peak_memory || '??';
            my $sec            = $job->wall_time;
            my $days           = int($sec / (24 * 60 * 60));
            my $hrs            = ($sec / (60 * 60)) % 24;
            my $mins           = ($sec / 60) % 60;
            my $remaining_secs = $sec % 60;
            my $extra          = $sec > 60 ? " ($days days, $hrs hrs, $mins mins, $remaining_secs secs)" : '';
            $frontend->output("The job says that actual memory used was ${mem}MB and it took $sec secs$extra");
        }
        else {
            $frontend->output("(because the job has not finished right now, I don't know the memory/ time it actually used");
        }
    }
    
    if ($job_state ne 'pending' || $sub->retries > 0) {
        my $pars = $sub->job_stdout;
        if ($pars) {
            show_output("The job itself produced some stdout:", $pars);
        }
        else {
            $frontend->output("(The job stdout file " . $sub->job_stdout_file->path . " was missing)");
        }
        
        my $pars2 = $sub->job_stderr;
        if ($pars2) {
            show_output("The job itself produced some stderr:", $pars2);
        }
        else {
            $frontend->output("(The job stderr file " . $sub->job_stderr_file->path . " was missing)");
        }
    }
    
    $frontend->output("---\n\n");
}

unless ($desired_sub) {
    unless ($count == 0 || $no_report) {
        $frontend->output("\n");
    }
    $frontend->output("$count submissions passed your filter");
    if ($count && !$desired_step) {
        $frontend->display_hash("Here's the break-down by step name", \%summary);
    }
}

if ($count > 0 && ($start_over || $full_reset || $partial_reset)) {
    my $action = $start_over ? 'reset' : 'delete';
    my $answer = $frontend->ask_question(question => "\nAre you sure you want to $action these submissions?", possibles => [qw(y n)], required => 1, non_interactive => 'y');
    if ($answer eq 'y') {
        if ($start_over) {
            foreach my $sub (@final_subs) {
                my $ss = $sub->stepstate;
                $ss->pipelinesetup->log_event("Calling Submission->start_over because the user chose to do a start_over with vrpipe-submissions", stepstate => $ss->id, dataelement => $ss->dataelement->id, submission => $sub->id, job => $sub->job->id);
                $sub->start_over;
            }
        }
        else {
            my %sss;
            foreach my $sub (@final_subs) {
                my $ss = $sub->stepstate;
                $sss{ $ss->id } = $ss;
            }
            undef @final_subs;
            undef @subs;
            
            $partial_reset ||= 0;
            foreach my $ss (values %sss) {
                my $text = $partial_reset ? 'start_over(only_failed => 1) because the user chose to do a partial_reset' : 'start_over because the user chose to do a full_reset';
                $ss->pipelinesetup->log_event("Calling StepState->$text with vrpipe-submissions", stepstate => $ss->id, dataelement => $ss->dataelement->id);
                $ss->start_over(only_failed => $partial_reset);
            }
        }
        $frontend->output("Done");
    }
    else {
        $frontend->output("You didn't confirm, so exiting");
    }
}

exit;

sub show_output {
    my ($message, $pars) = @_;
    my $file = $pars->file;
    
    my @outputs;
    my $lines = $pars->parsed_record;
    my @orig  = ();
    my $got_output;
    while ($pars->next_record) {
        push(@orig, [@{ $pars->parsed_record }]);
        my $num_lines = @$lines;
        my @selected_lines;
        if ($num_lines > 45) {
            for (1 .. 10) {
                push(@selected_lines, $lines->[$_ - 1]);
            }
            my $other_lines = $num_lines - 40;
            push(@selected_lines, "\n[... $other_lines more lines in $file ...]\n\n");
            for (($num_lines - 30) .. $num_lines) {
                push(@selected_lines, $lines->[$_ - 1]);
            }
        }
        else {
            @selected_lines = @$lines;
        }
        
        unless ($got_output) {
            foreach my $line (@selected_lines) {
                if ($line) {
                    $got_output = 1;
                    last;
                }
            }
        }
        
        push(@outputs, \@selected_lines);
    }
    
    if ($got_output) {
        $frontend->output($message);
        $frontend->output("\n");
        my $oref = shift @outputs;
        foreach my $line (@$oref) {
            $frontend->output($line);
        }
        
        foreach $oref (@outputs) {
            $frontend->output("\na previous attempt gave this output:");
            $frontend->output("\n");
            foreach my $line (@$oref) {
                $frontend->output($line);
            }
        }
        
        $frontend->output("\n");
    }
}
